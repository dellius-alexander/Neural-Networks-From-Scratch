# github workflow to test project in dev environment
name: Dev Tests
env:
  TZ: 'America/New_York'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main
jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11" ]
    steps:
      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
      # Task for linting with black
      - name: Lint with black and Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          # Code formatting with black, check every python file 
          #   in the crud_repository directory 
          black src/ 
          black tests/ 
          black notebooks/ 

      # Task for testing with pytest
      - name: Configure Git user, Commit and push changes
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          git config --global user.name 'github-actions[bot]' || echo "No name to set"
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' || echo "No email to set"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} || echo "No remote to set"

          # Remove lock file if it exists
          if [ -f .git/index.lock ]; then
            rm .git/index.lock || echo "No lock file to remove"
          fi
          
          git commit -m "Auto-format code with black" -a || echo "No changes to commit"
          git push origin refs/heads/main -f || echo "No push to make"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER_NAME: ${{ secrets.USER_NAME }}
          USER_EMAIL: ${{ secrets.USER_EMAIL }}
          PAT: ${{ secrets.PAT }}


      # Task for testing with pytest
      - name: Test with pytest
        run: |
          pytest tests/
